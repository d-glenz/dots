# random definitions {{{1
fcd () # {{{2
{
    # fuzzy cd
    fztarget="$(fzf "$@")"
    if [ $? -ne 0 ]; then  # this is dumb
        return 1
    fi

    if [ -f $fztarget ]; then
        target="$(dirname "$fztarget")"
    else
        target="$fztarget"
    fi;
    if [ $? -ne 0 ]; then  # this is dumber
        return 1
    fi
    cd "$target"
}  # }}}
# prompt stuff {{{2
function _git_prompt {  
    local rc=$?
    if  git rev-parse HEAD >/dev/null 2>&1 ; then
        printf "(%s %s) " $(__git_ps1 "%s") $(git rev-parse --short HEAD )
    fi
    return $rc
}
function _cname_prompt {
    local rc=$?
    local cn="$(cat /etc/hostname)"
    if [ -f /etc/cname ]; then
        local hn=$cn
        cn="$(cat /etc/cname)"
        if [[ "unknown" = $cn ]]; then
            cn=$hn
        fi
    fi
    printf "$cn"
    return $rc
}  # }}}
# cdw & autocomplete {{{2
function cdw {  
    if [[ -d  "/data/$USER/workspaces/$1" ]]; then
        cd "/data/$USER/workspaces/$1"
    elif [[ -d  "$HOME/workspaces/$1" ]]; then
        cd "$HOME/workspaces/$1"
    else
        return 1
    fi;
} 
_cdw () {
    local cur
    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    k=0
    for rootdir in "/data/$USER/workspaces" "/$HOME/workspaces" ; do
        for j in $( compgen -f "$rootdir/$cur" ); do # loop trough the possible completions
            if [ -d "$j" ]; then
                j="${j}/"
            else
                continue
            fi
            COMPREPLY[k++]=${j#$rootdir/} # remove the directory prefix from the array
        done
    done
    return 0
}  # }}}
use_devtoolset_8 ()  # {{{2
{
    if [ -d /opt/rh/devtoolset-8 ]; then
        . /opt/rh/llvm-toolset-7/enable;
        . /opt/rh/devtoolset-8/enable;
    fi
}  # }}}
running_tally() {  # {{{2
    # Counts the number of LINES in which $1 appears in $2
    a=0;
    tail -f "$2" -n500 | while read -r line; do
        echo "$line" | grep "$1" > /dev/null && ((a++)) && echo -ne "\rFound: $a     ";
    done;
}  # }}}
function git { # {{{
    command git "$@";
    local rc=$?
    if [[ "$@" != *"rev-parse"* && ${GIT_RECORD_COMMANDS+x} ]]; then
        echo "[`date +%H:%M:%S`] ($rc) git $@" >> ~/git.log;
    fi
    return $rc
} #  }}}
aa ()
{
    FS=${1:-\ };
    shift;
    gawk -v FS="$FS" "{ print \$${1:-1} }"
};
cdf ()  # {{{2
{
    cd $(dirname $1)
}  # }}}
function pydebug() { python -m pdb "$(which $1)" "${@:2}";}
watchtask(){ # {{{2
    while true; do 
        cols=$(tput cols);
        lines=$(tput lines);
        tout=$(clear; task $1 rc.defaultwidth:$cols rc.defaultheight:$lines rc._forcecolor:on 2>/dev/null); 
        echo "$tout"; 
        sleep 1
    done;
} # }}}
# }}}


# toolbox stuff {{{1

unset -f ltf LT lt ltc ltcd

ltf ()
{
    # Convenience function used by LT and ltc
    gawk -v RS='\n\n\n' -v FS=' \\| ' -v OFS=' | ' -v regex="$(gawk -v FS=/ '{ regex = "(/" $2 "/)?"; for (i = 3; i < NF; i++) regex = "(" regex $i "/)?"; regex = regex $NF "/" } ; END { print regex }' <<<"$(pwd)")" '{ n = split($4, a, /\n+/); m = split($1, b, /\n/); for (i = 2; i < m; i++) { split(b[i], c, /\t/); sub("^" regex, "", c[2]); print c[1] "      => " c[2] } if (b[m] "") print substr(b[m], 1, 9), $2, $3, a[1]; for (i = 1; i <= n; i++) { if (a[i] ~ /commit/) commit = substr(a[i], 8, 9); else if (a[i] ~ /^[ \t]/) { sub(/^[ \t]+/, "", a[i]); if (commit "") { print "         ", commit; commit = "" } else print "            " a[i] } } }'
}

LT ()
{
    # Git changes in the last 24h by default, implemented in the current dir. and its sudirs.
    [[ $(git rev-parse --abbrev-ref HEAD) = master ]] && {
        git pull --ff-only --quiet origin || echo 'Current HEAD is not up-to-date and the merge cannot be resolved as a fast-forward' 1>&2
    };
    local since=${1:-yesterday}; shift;
    local until=${1:-today};
    git log --reverse --pretty=tformat:'%H | %<(21)%an | %cd | %B%n' --since="$since" --until="$until" --date=local . | ltf
}

lt ()
{
    # Git changes in the last 24h by default, implemented in the current dir. and its sudirs. - only PR comments
    LT "${1:+$1}" "${2:+$2}" | /usr/bin/grep --color=auto -v ^\ 
}

ltc ()
{
    # Git changes matching regexp in the last 24h by default, implemented in the current dir. and its sudirs. - it shows files affected by the change(s)
    [[ $(git rev-parse --abbrev-ref HEAD) = master ]] && {
        git pull --ff-only --quiet origin || echo 'Current HEAD is not up-to-date and the merge cannot be resolved as a fast-forward' 1>&2
    };
    CHANGE=${1:-Merge pull request};
    shift;
    local since=${1:-yesterday};
    shift;
    git log --reverse --name-status --since="$since" -E --grep="$CHANGE" --pretty=tformat:'%H | %<(21)%an | %cd | %B%n' . | ltf
}

ltcd ()
{
    # Git changes matching regexp in the last 24h by default, implemented in the current dir. and its sudirs. - it shows actual differences
    local CHANGE=${1:-Merge pull request};
    shift;
    local since=${1:-yesterday};
    shift;
    ltc "$CHANGE" "$since" | gawk -v FS=' \\| ' -v OFS=\| 'NF == 4 { sha1 = $1; next } ; NF == 1 && /^[^\tD]/ { split($0, a, /=> /); filename = a[2]; print sha1, filename }' | parallel --colsep \\\| --keep-order 'test -e {2} && ! test -d {2} && git diff -U0 {1}{^,} {2}'
}

export -f LT lt ltc ltcd

# }}}
